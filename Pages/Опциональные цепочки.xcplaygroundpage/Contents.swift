//: [Previous](@previous)

import Foundation

//Опциональные цепочки

//Опциональная цепочка (optional chaining) - процесс запросов и вызовов свойств, методов, сабскриптов (индексов) у опционала, который может быть nil. Если опционал содержит какое-либо значение, то вызов свойства, метода или сабскрипта успешен, и наоборот, если опционал равен nil, то вызов свойства, метода или сабскрипта возвращает nil. Множественные запросы могут быть соединены вместе, и вся цепочка этих запросов не срабатывает, если хотя бы один запрос равен nil.


//есть персона, которая является работником(Worker, у работника есть name). У персоны есть работа(Job, в которой есть жалование, которое определяется в классе Salary). В итоге у нашей персоны есть имя и жалование
class Person {
    let job: Job? = Job()
    //записываем в массив, тк работников может быть несколько
    let workers: [Worker]? = [Worker()]
}

class Worker{
    let name = "Petya"
}

class Job{
    let salary: Salary? = Salary()
}

class Salary{
    let salary =  1000
}


//Если все переменные не опциональные и цепочка не нарушена, мы можем узнать жалование сотрудника
let person =  Person()

//через if
if let job = person.job{
    if let salary =  job.salary {
        salary.salary
    }
}

//сокращаем запись
if let job = person.job, let salary =  job.salary {
        salary.salary
}

//опциональная цепочка
//определяем жалование = если у персоны есть работа, если на работе платят жалование
let salary = person.job?.salary?.salary
